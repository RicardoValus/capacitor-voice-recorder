{"version":3,"file":"VoiceRecorderImpl.js","sourceRoot":"","sources":["../../src/VoiceRecorderImpl.ts"],"names":[],"mappings":"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","sourcesContent":["import getBlobDuration from 'get-blob-duration';\n\nimport type {Base64String, CurrentRecordingStatus, GenericResponse, RecordingData} from './definitions';\nimport {\n    alreadyRecordingError,\n    couldNotQueryPermissionStatusError,\n    deviceCannotVoiceRecordError,\n    emptyRecordingError,\n    failedToFetchRecordingError,\n    failedToRecordError,\n    failureResponse,\n    missingPermissionError,\n    recordingHasNotStartedError,\n    successResponse,\n} from './predefined-web-responses';\n\n// these mime types will be checked one by one in order until one of them is found to be supported by the current browser\nconst possibleMimeTypes = ['audio/aac', 'audio/webm;codecs=opus', 'audio/mp4', 'audio/webm', 'audio/ogg;codecs=opus'];\nconst neverResolvingPromise = (): Promise<any> => new Promise(() => undefined);\n\nexport class VoiceRecorderImpl {\n\n    private mediaRecorder: MediaRecorder | null = null;\n    private chunks: any[] = [];\n    private pendingResult: Promise<RecordingData> = neverResolvingPromise();\n\n    public static async canDeviceVoiceRecord(): Promise<GenericResponse> {\n        if (navigator?.mediaDevices?.getUserMedia == null || VoiceRecorderImpl.getSupportedMimeType() == null) {\n            return failureResponse();\n        } else {\n            return successResponse();\n        }\n    }\n\n    public async startRecording(): Promise<GenericResponse> {\n        if (this.mediaRecorder != null) {\n            throw alreadyRecordingError();\n        }\n        const deviceCanRecord = await VoiceRecorderImpl.canDeviceVoiceRecord();\n        if (!deviceCanRecord.value) {\n            throw deviceCannotVoiceRecordError();\n        }\n        const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => successResponse());\n        if (!havingPermission.value) {\n            throw missingPermissionError();\n        }\n\n        return navigator.mediaDevices.getUserMedia({audio: true})\n            .then(this.onSuccessfullyStartedRecording.bind(this))\n            .catch(this.onFailedToStartRecording.bind(this));\n    }\n\n    public async stopRecording(): Promise<RecordingData> {\n        if (this.mediaRecorder == null) {\n            throw recordingHasNotStartedError();\n        }\n        try {\n            this.mediaRecorder.stop();\n            this.mediaRecorder.stream.getTracks().forEach(track => track.stop());\n            return this.pendingResult;\n        } catch (ignore) {\n            throw failedToFetchRecordingError();\n        } finally {\n            this.prepareInstanceForNextOperation();\n        }\n    }\n\n    public static async hasAudioRecordingPermission(): Promise<GenericResponse> {\n        return navigator.permissions.query({name: 'microphone' as any})\n            .then(result => ({value: result.state === 'granted'}))\n            .catch(() => {\n                throw couldNotQueryPermissionStatusError();\n            });\n    }\n\n    public static async requestAudioRecordingPermission(): Promise<GenericResponse> {\n        const havingPermission = await VoiceRecorderImpl.hasAudioRecordingPermission().catch(() => failureResponse());\n        if (havingPermission.value) {\n            return successResponse();\n        }\n\n        return navigator.mediaDevices.getUserMedia({audio: true})\n            .then(() => successResponse())\n            .catch(() => failureResponse());\n    }\n\n    public pauseRecording(): Promise<GenericResponse> {\n        if (this.mediaRecorder == null) {\n            throw recordingHasNotStartedError();\n        } else if (this.mediaRecorder.state === 'recording') {\n            this.mediaRecorder.pause();\n            return Promise.resolve(successResponse());\n        } else {\n            return Promise.resolve(failureResponse());\n        }\n    }\n\n    public resumeRecording(): Promise<GenericResponse> {\n        if (this.mediaRecorder == null) {\n            throw recordingHasNotStartedError();\n        } else if (this.mediaRecorder.state === 'paused') {\n            this.mediaRecorder.resume();\n            return Promise.resolve(successResponse());\n        } else {\n            return Promise.resolve(failureResponse());\n        }\n    }\n\n    public getCurrentStatus(): Promise<CurrentRecordingStatus> {\n        if (this.mediaRecorder == null) {\n            return Promise.resolve({status: 'NONE'});\n        } else if (this.mediaRecorder.state === 'recording') {\n            return Promise.resolve({status: 'RECORDING'});\n        } else if (this.mediaRecorder.state === 'paused') {\n            return Promise.resolve({status: 'PAUSED'});\n        } else {\n            return Promise.resolve({status: 'NONE'});\n        }\n    }\n\n    public static getSupportedMimeType(): string | null {\n        if (MediaRecorder?.isTypeSupported == null) return null;\n        const foundSupportedType = possibleMimeTypes.find(type => MediaRecorder.isTypeSupported(type));\n        return foundSupportedType ?? null;\n    }\n\n    private onSuccessfullyStartedRecording(stream: MediaStream): GenericResponse {\n        this.pendingResult = new Promise((resolve, reject) => {\n            this.mediaRecorder = new MediaRecorder(stream);\n            this.mediaRecorder.onerror = () => {\n                this.prepareInstanceForNextOperation();\n                reject(failedToRecordError());\n            };\n            this.mediaRecorder.onstop = async () => {\n                const mimeType = VoiceRecorderImpl.getSupportedMimeType();\n                if (mimeType == null) {\n                    this.prepareInstanceForNextOperation();\n                    reject(failedToFetchRecordingError());\n                    return;\n                }\n                const blobVoiceRecording = new Blob(this.chunks, {'type': mimeType});\n                if (blobVoiceRecording.size <= 0) {\n                    this.prepareInstanceForNextOperation();\n                    reject(emptyRecordingError());\n                    return;\n                }\n                const recordDataBase64 = await VoiceRecorderImpl.blobToBase64(blobVoiceRecording);\n                const recordingDuration = await getBlobDuration(blobVoiceRecording);\n                this.prepareInstanceForNextOperation();\n                resolve({value: {recordDataBase64, mimeType, msDuration: recordingDuration * 1000}});\n            };\n            this.mediaRecorder.ondataavailable = (event: any) => this.chunks.push(event.data);\n            this.mediaRecorder.start();\n        });\n        return successResponse();\n    }\n\n    private onFailedToStartRecording(): GenericResponse {\n        this.prepareInstanceForNextOperation();\n        throw failedToRecordError();\n    }\n\n    private static blobToBase64(blob: Blob): Promise<Base64String> {\n        return new Promise(resolve => {\n            const reader = new FileReader();\n            reader.onloadend = () => {\n                const recordingResult = String(reader.result);\n                const splitResult = recordingResult.split('base64,');\n                const toResolve = (splitResult.length > 1) ? splitResult[1] : recordingResult;\n                resolve(toResolve.trim());\n            };\n            reader.readAsDataURL(blob);\n        });\n    }\n\n    private prepareInstanceForNextOperation(): void {\n        if (this.mediaRecorder != null && this.mediaRecorder.state === 'recording') {\n            try {\n                this.mediaRecorder.stop();\n            } catch (ignore) {\n            }\n        }\n        this.pendingResult = neverResolvingPromise();\n        this.mediaRecorder = null;\n        this.chunks = [];\n    }\n\n}\n"]}